# Redirecionamento HTTP para HTTPS
server {
    listen 80;
    server_name controle-financeiro.gaius.digital;

    # Let's Encrypt ACME Challenge
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
        try_files $uri $uri/ =404;
    }

    # Health check endpoint (mantém em HTTP)
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Redirecionar todo o resto para HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# Configuração HTTPS
server {
    listen 443 ssl;
    http2 on;
    server_name controle-financeiro.gaius.digital;

    # Certificados SSL
    ssl_certificate /etc/letsencrypt/live/controle-financeiro.gaius.digital/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/controle-financeiro.gaius.digital/privkey.pem;

    # Configurações SSL modernas e seguras
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
    ssl_ecdh_curve secp384r1;
    ssl_prefer_server_ciphers off;

    # SSL session cache is configured globally in nginx.conf

    # OCSP Stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    ssl_trusted_certificate /etc/letsencrypt/live/controle-financeiro.gaius.digital/chain.pem;

    # Resolver DNS (use o DNS do seu servidor)
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;

    # Headers de segurança SSL
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header X-Frame-Options SAMEORIGIN always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Tamanho máximo de upload
    client_max_body_size 10M;

    # Timeout settings
    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;

    # Proxy headers
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $server_name;

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # API routes - Proxy para o backend
    location /api/ {
        # Rate limiting para API
        limit_req zone=api burst=20 nodelay;
        
        # Rewrite para remover /api do path
        rewrite ^/api/(.*) /$1 break;
        
        proxy_pass http://api_backend;
        
        # Headers específicos para API
        proxy_set_header Accept-Encoding gzip;
        proxy_buffering on;
        proxy_buffer_size 128k;
        proxy_buffers 4 256k;
        proxy_busy_buffers_size 256k;
        
        # CORS headers para API
        add_header Access-Control-Allow-Origin $http_origin always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, PATCH" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept, Origin, X-Requested-With" always;
        add_header Access-Control-Allow-Credentials true always;
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin $http_origin always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, PATCH" always;
            add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept, Origin, X-Requested-With" always;
            add_header Access-Control-Allow-Credentials true always;
            add_header Access-Control-Max-Age 1728000;
            add_header Content-Type 'text/plain; charset=utf-8';
            add_header Content-Length 0;
            return 204;
        }
    }

    # Rate limiting específico para login
    location /api/auth/login {
        limit_req zone=login burst=5 nodelay;
        
        rewrite ^/api/(.*) /$1 break;
        proxy_pass http://api_backend;
        
        proxy_set_header Accept-Encoding gzip;
        proxy_buffering on;
    }

    # Arquivos estáticos e SPA - Proxy para o frontend
    location / {
        proxy_pass http://web_backend;
        
        # Headers para SPA
        proxy_set_header Cache-Control "no-cache, no-store, must-revalidate";
        proxy_set_header Pragma "no-cache";
        proxy_set_header Expires "0";
        
        # Fallback para SPA routing
        proxy_intercept_errors on;
        error_page 404 = @fallback;
    }

    # Fallback para rotas do Angular
    location @fallback {
        proxy_pass http://web_backend;
    }

    # Arquivos estáticos com cache longo
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        proxy_pass http://web_backend;
        
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary Accept-Encoding;
        
        # Compressão para arquivos estáticos
        gzip_static on;
    }

    # Logs específicos
    access_log /var/log/nginx/gerenciador-ssl.access.log main;
    error_log /var/log/nginx/gerenciador-ssl.error.log;
}